import axios from "axios";
import React, { useEffect, useState } from "react";
import { FaSearch } from "react-icons/fa";
import { toast } from "react-toastify";
import { useAuth } from "../../Context/AuthContext";
import { FaArrowLeft } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import { BiLogOut } from "react-icons/bi";
import { useSocketContext } from "../../Context/socketContext";
import userConversation from "../../Zustans/userConversation";


const Sidebar = ({onSelectUser}) => {
  const [searchInput, setSearchInput] = useState("");
  const{authUser , setAuthUser} = useAuth();
  const [searchUser, setSearchUser] = useState([]);
  const [loading, setLoading] = useState(false);
  const [chatUser, setChatUser] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState(null);
  const navigate = useNavigate();
  const{onlineUsers , socket} = useSocketContext();
  const [newMessageUsers,setNewMessageUsers] = useState('')
  const {message , setMessage,selectedConversation , setSelectedConversation} = userConversation();


  const nowOnline = chatUser.map((user1)=>(user1._id));
  // chat function
  const isOnline = nowOnline.map(userId => onlineUsers.includes(userId));
 
  useEffect(()=>{
    socket?.on("newMessage",(newMessage)=>{
      setNewMessageUsers(newMessage)
    })
    return()=>socket?.off("newMessage");
  },[socket,message])

  //show user with u chatted
  useEffect(() => {
    const chatUserHandler = async () => {
      setLoading(true);
      try {
        const chatters = await axios.get(`/api/user/currentChatters`);
        const data = chatters.data;
        if (data.success === false) {
          setLoading(false);
          console.log(data.message);
        }
        setLoading(false);
        setChatUser(data);
      } catch (error) {
        setLoading(false);
        console.log(error);
      }
    };
    chatUserHandler();
  }, []);
  console.log(chatUser);

//handles logout
  const handlelogout=async()=>{
    const ConfirmLogout = window.prompt("type 'Username' To LOGOUT")
    if(ConfirmLogout === authUser.Username){
        setLoading(true)
        try {
            const logout = await axios.post(`/api/authh/logout`)
            const data = logout.data;
            if(data.success === false){
                setLoading(false)
              console.log(data.message)
            }
            toast.info(data.message)
            localStorage.removeItem('CHAT APP')
            setAuthUser(null)
            setLoading(false)
            navigate('/login')
        } catch (error) {
            console.log(error)
            setLoading(false)
        }
    }else{
        toast.info("Logout Cancelled")
    }
    
  }
//show which user is selected
  const handleUserClick = (user1) => {
     onSelectUser(user1)
    setSelectedConversation(user1)
    setSelectedUserId(user1._id);
    setNewMessageUsers('')
  };
  //back from search result
  const handleSearchBack=()=>{
    setSearchUser([]);
    setSearchInput('')
  }
  //show user from the search result
  const handleSearchSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const search = await axios.get(`/api/user/search?search=${searchInput}`);
      const data = search.data;
      if (data.success === false) {
        setLoading(false);
        console.log(data.message);
      }
      setLoading(false);
      if (data.length === 0) {
        toast.info("User not found");
      } else {
        setSearchUser(data);
      }
    } catch (error) {
      setLoading(false);
      console.log(error);
    }
  };
  console.log(searchUser);


  return (
    <div className="h-full w-[300px] px-1">
      <div className="flex justify-between gap-2">
        <form
          onSubmit={handleSearchSubmit}
          className="w-auto flex items-center justify-between bg-white rounded-full"
        >
          <input
            value={searchInput}
            onChange={(e) => setSearchInput(e.target.value)}
            type="text"
            className="px-4 bg-transparent w-auto outline-none rounded-full"
            placeholder="search user"
          />
          <button className="btn btn-circle bg-sky-700 honer:bg-gray-950">
            <FaSearch />
          </button>
        </form>
        <img
          onClick={()=>navigate(`/profile/${authUser?._id}`)}
          src={authUser?.ProfilePic}
          className="self-center h-12 w-12 hover:scale-110 cursor-pointer"
        />
      </div>
      <div className="divider px-3"></div>
      {searchUser?.length > 0 ? (
        <>
          <div className="min-h-[70%] max-h-[80%] m overflow-y-auto scrollbar">
            <div className="w-auto">
              {searchUser.map((user1, index) => (
                <div key={user1._id}>
                  <div
                    onClick={() => handleUserClick(user1)}
                    className={`flex gap-3 items-center rounded p-2 py-1 cursor-pointer ${
                      selectedUserId === user1?._id ? "bg-sky-400" : ""
                    } `}
                  >
                    {/* socket is online */}

                    <div className={`avatar ${isOnline[index] ? 'online':''}`}>
                      <div className="w-12 rounded-full">
                        <img src={user1.ProfilePic} alt="user1.img"/>
                      </div>
                    </div>
                    <div className="flex flex-col flex-1">
                      <p className="font-bold text-gray-950 text-white">
                        {user1.Username}
                      </p>
                    </div>
                  </div>
                  
                
                       <div className="divider divide-solid px-3 h-[1px]"></div>
        
                </div>
              ))}
            </div>
          </div>
          <div className="mt-auto px-1 py-1 flex">
            <button onClick={handleSearchBack} className="bg-white rounded-full px-2 py-1">
              <FaArrowLeft size={25} />
            </button>
          </div>

        </>
      ) : (
        <>
          <div className="min-h-[70%] max-h-[80%] m overflow-y-auto scrollbar">
            <div className="w-auto">
              {chatUser.length === 0 ? (
                <>
                  <div className="font-bold items-center flex flex-col text-xl text-yellow-500">
                    <h1>Search user to chat!</h1>
                  </div>
                </>
              ) : (
                <>
                  {chatUser.map((user1, index) => (
                    <div key={user1._id}>
                      <div
                        onClick={() => handleUserClick(user1)}
                        className={`flex gap-3 items-center rounded p-2 py-1 cursor-pointer ${
                          selectedUserId === user1?._id ? "bg-sky-400" : ""
                        } `}
                      >
                        <div className={`avatar ${isOnline[index] ? 'online':''}`}>
                          <div className="w-12 rounded-full">
                            <img src={user1.ProfilePic} alt="user1.img" />
                          </div>
                        </div>
                        <div className="flex flex-col flex-1">
                          <p className="font-bold text-gray-950 text-white">
                            {user1.Username}
                          </p>
                        </div>
                        <div>
                        {newMessageUsers.receiverId === authUser._id && newMessageUsers.senderId === user1._id ? <div className="rounded-full bg-green-700 texte-sm text-white px-[4px]">+1</div>:<></>
                        }
                        </div>
                      </div>
                      <div className="divider divide-solid px-3 h-[1px]"></div>
                    </div>
                  ))}
                </>
              )}
            </div>
          </div>
          <div className="mt-auto flex px-1 py-1" >
            <button onClick={handlelogout} className="hover:bg-red-500 w-10 cursor-pointer hover:text-white rounded-lg flex">
            <BiLogOut size={25} />
            </button>
            <p className="text-sm text-white py-1">Logout</p>
          </div>
        </>
      )}
    </div>
  );
};

export default Sidebar;
